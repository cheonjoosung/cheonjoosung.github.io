I"]?<p><code class="highlighter-rouge">Angular Service(앵귤러 서비스) 기초에 관한 포스팅입니다.</code> Angular 에서 Service 는 외부에서 정의된 의존성 주입(Dependeny Injection) 대상이 되는 클래스에요. 서비스를 사용하기 위해서는 몇가지 세팅이 필요해요. Providers 선언, injectable 등 서비스에 전반적인 개념과 사용법에 대한 글을 써볼께요.</p>

<p><br /><b>Angular Service 역할</b><br />
<br /><b>1) <code class="highlighter-rouge">애플리케이션 관심사와 개별 컴포넌트 관심사 분리</code></b><br /></p>
<p>=) 컴포넌트에 공통적으로 쓰일 수 있는 기능을 서비스로 개발 - 컴포넌트 : 독립적인 특성을 지닌 기능</p>
<p>=) 중복되는 코드를 서비스로 옮기는 작업을 통해 컴포넌트의 응집성 높여야 함</p>

<p><br /><b>2) <code class="highlighter-rouge">컴포넌트 중간에서 데이터 중개자의 역할 수행</code></b><br /></p>
<p>=) 컴포넌트 to 컴포넌트 의 데이터 교환은 서비스를 통해 이루어 짐</p>
<p>=) @Input 장식자나 EventEmitter 객체 이용 : 일관속 있는 자료구조가 없어서 개별적인 속성 값만 주고 받음</p>

<p><br /><b>2) <code class="highlighter-rouge">관심사 분리</code></b><br /></p>
<p>=) 관심사 분리는 프로그래밍 기법 중에 하나</p>
<p>=) 전역 관심사 : 데이터 서비스, 로깅 서비스, 비즈니스 로직 서비스 등은 대부분의 컴포넌트에서 공통적으로 사용이 가능</p>
<p>=) 각 서비스는 최소한의 기능을 갖는 단위로 작성하는 것이 구글 가이드</p>
<p>=) 관심사 분리를 통해 중복 코드가 줄어들고 재사용성 향상 됨</p>

<p><br /><b>Angular Service 사용</b><br />
<br /><b>1) <code class="highlighter-rouge">Hello Service</code></b><br /></p>
<p>=) Angular CLI 를 통해 `ng g service service_name` 를 입력하면 service_name.ts, service_name.spec.ts 파일이 생성 됨</p>
<p>=) app.module.ts 의 providers : [ service_name ] 등록 &amp;&amp; import { service_name } from ./경로</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="p">{</span> <span class="no">BrowserModule</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/platform-browser'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">NgModule</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">AppComponent</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./app.component'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">HelloService</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hello.service'</span><span class="p">;</span>

<span class="vi">@NgModule</span><span class="p">({</span>
  <span class="ss">declarations: </span><span class="p">[</span> <span class="no">AppComponent</span> <span class="p">],</span>
  <span class="ss">imports: </span><span class="p">[</span> <span class="n">rowserModule</span> <span class="p">],</span>
  <span class="ss">providers: </span><span class="p">[</span> <span class="no">HelloService</span> <span class="p">],</span>
  <span class="ss">bootstrap: </span><span class="p">[</span> <span class="no">AppComponent</span> <span class="p">]</span>
<span class="p">})</span>
<span class="n">export</span> <span class="k">class</span> <span class="nc">AppModule</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>=) hello.service.ts 파일 오픈 인사 리턴하는 함수 작성</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="p">{</span> <span class="no">Injectable</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="vi">@Injectable</span><span class="p">()</span>
<span class="n">export</span> <span class="k">class</span> <span class="nc">HelloService</span> <span class="p">{</span>
  <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>  <span class="p">}</span>

  <span class="n">say</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">"Hello Sydeny!!!"</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>=) app.component.ts 파일을 오픈 Service 를 사용해보자  </p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="p">{</span> <span class="no">Component</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">HelloService</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hello.service'</span>

<span class="vi">@Component</span><span class="p">({</span>
  <span class="ss">selector: </span><span class="s1">'app-root'</span><span class="p">,</span>
  <span class="ss">templateUrl: </span><span class="s1">'./app.component.html'</span><span class="p">,</span>
  <span class="ss">styleUrls: </span><span class="p">[</span><span class="s1">'./app.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="n">export</span> <span class="k">class</span> <span class="nc">AppComponent</span> <span class="p">{</span>
  <span class="n">title</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
  <span class="n">constructor</span><span class="p">(</span><span class="kp">private</span> <span class="n">helloService</span> <span class="p">:</span> <span class="no">HelloService</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">title</span> <span class="o">=</span> <span class="n">helloService</span><span class="p">.</span><span class="nf">say</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>=) template 에서  을 호출하면 Hello Sydeny!! 가 호출되는 것을 확인할 수 있다. </p>
<p>=) 서비스를 생성자를 통해 초기화 할 수 있고 new 연산자를 사용하여 초기화도 가능하다. 하지만 new 연산자를 사용하면 객체 공유 문제 및 메모리 관련 문제가 생길 수 있다.</p>

<p><br /><b>2) <code class="highlighter-rouge">데이터 객체 사용</code></b><br /></p>
<p>=) 사용할 데이터 형 설정 &amp;&amp; 데이터 객체 설정</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">export</span> <span class="k">class</span> <span class="nc">Hero</span> <span class="p">{</span>
  <span class="n">position</span> <span class="p">:</span> <span class="n">string</span><span class="p">;</span>
  <span class="ss">name: </span><span class="n">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">import</span> <span class="p">{</span> <span class="no">Hero</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hero'</span><span class="p">;</span>

<span class="n">export</span> <span class="n">var</span> <span class="no">HERO</span> <span class="p">:</span> <span class="no">Hero</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="ss">position: </span><span class="s1">'top'</span> <span class="p">,</span> <span class="nb">name</span><span class="ss">:'티모'</span><span class="p">},</span> <span class="p">{</span><span class="ss">position: </span><span class="s1">'mid'</span> <span class="p">,</span> <span class="nb">name</span><span class="ss">:'리 신'</span><span class="p">},</span> <span class="p">{</span><span class="ss">position: </span><span class="s1">'AD'</span> <span class="p">,</span> <span class="nb">name</span><span class="ss">:'이즈리얼'</span><span class="p">}</span>
<span class="p">];</span></code></pre></figure>

<p>=) 서비스에서 데이터 객체 전달하는 함수 추가 : getHero() </p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="p">{</span> <span class="no">Injectable</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">HERO</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hero-data'</span><span class="p">;</span>

<span class="vi">@Injectable</span><span class="p">()</span>
<span class="n">export</span> <span class="k">class</span> <span class="nc">HelloService</span> <span class="p">{</span>

  <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="n">say</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">"Hello Sydeny!!!"</span>
  <span class="p">}</span>

  <span class="n">getUser</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">HERO</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>=) 컴포넌트에서 서비스 함수 호출 &amp;&amp; this.heroList 에 저장 </p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="p">{</span> <span class="no">Component</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">HelloService</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hello.service'</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">Hero</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hero'</span>

<span class="vi">@Component</span><span class="p">({</span>
  <span class="ss">selector: </span><span class="s1">'app-root'</span><span class="p">,</span>
  <span class="ss">templateUrl: </span><span class="s1">'./app.component.html'</span><span class="p">,</span>
  <span class="ss">styleUrls: </span><span class="p">[</span><span class="s1">'./app.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="n">export</span> <span class="k">class</span> <span class="nc">AppComponent</span> <span class="p">{</span>
  <span class="n">title</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
  <span class="n">heroList</span><span class="ss">:Hero</span><span class="p">[];</span>

  <span class="n">constructor</span><span class="p">(</span><span class="kp">private</span> <span class="n">helloService</span> <span class="p">:</span> <span class="no">HelloService</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">title</span> <span class="o">=</span> <span class="n">helloService</span><span class="p">.</span><span class="nf">say</span><span class="p">();</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">heroList</span> <span class="o">=</span> <span class="n">helloService</span><span class="p">.</span><span class="nf">getUser</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><br /><b>3) <code class="highlighter-rouge">Promise 사용</code></b><br /></p>
<p>=) Promise 는 비동기 코드를 사용할 때 주로 사용</p>
<p>=) 위에서 사용된 User 데이터 형과 USER 객체는 그대로 사용하고 service 만 일부 수정</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="p">{</span> <span class="no">Injectable</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">HERO</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hero-data'</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">Hero</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'./hero'</span><span class="p">;</span>

<span class="vi">@Injectable</span><span class="p">()</span>
<span class="n">export</span> <span class="k">class</span> <span class="nc">HelloService</span> <span class="p">{</span>

  <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="n">say</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">"Hello Sydeny!!!"</span>
  <span class="p">}</span>

  <span class="n">getHero</span><span class="p">():</span> <span class="no">Promise</span><span class="o">&lt;</span><span class="no">Hero</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="no">HERO</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">getHeroDelay</span><span class="p">():</span> <span class="no">Promise</span><span class="o">&lt;</span><span class="no">Hero</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">new</span> <span class="no">Promise</span><span class="o">&lt;</span><span class="no">Hero</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="n">resolve</span> <span class="o">=&gt;</span> <span class="n">setTimeout</span><span class="p">(</span><span class="n">resolve</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)).</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="n">this</span><span class="p">.</span><span class="nf">getHero</span><span class="p">());</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>=) Component 에서 호출 방법 : 성공시에 값을 할당한다는 의미</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">constructor</span><span class="p">(</span><span class="kp">private</span> <span class="n">helloService</span> <span class="p">:</span> <span class="no">HelloService</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">this</span><span class="p">.</span><span class="nf">title</span> <span class="o">=</span> <span class="n">helloService</span><span class="p">.</span><span class="nf">say</span><span class="p">();</span>
  <span class="n">helloService</span><span class="p">.</span><span class="nf">getHero</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="n">hero</span> <span class="o">=&gt;</span> <span class="n">this</span><span class="p">.</span><span class="nf">heroList</span> <span class="o">=</span> <span class="n">hero</span><span class="p">);</span>
  <span class="n">helloService</span><span class="p">.</span><span class="nf">getHeroDelay</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="n">hero</span> <span class="o">=&gt;</span> <span class="n">this</span><span class="p">.</span><span class="nf">heroList2</span> <span class="o">=</span> <span class="n">hero</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

:ET